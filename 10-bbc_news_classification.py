# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PDuFuKIlqmnvCW4GJoF-dnKD783Plmtc
"""

import os
import pandas as pd
# import numpy as np 
import re,string
# import matplotlib.pyplot as plt
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.pipeline import Pipeline
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.model_selection import train_test_split
from sklearn.feature_selection import SelectKBest, chi2
from sklearn.ensemble import RandomForestClassifier
import pickle
import nltk
nltk.download('stopwords')
# %matplotlib inline

# data = {"news":[],"category":[]}
# category = os.listdir('09-classification/bbc/')
# for cat in category:
  
#   file_path = "09-classification/bbc"
#   files = os.listdir(f'{file_path}/{cat}')
#   for file in files:
#     try:
#       f = open(f"{file_path}/{cat}/{file}",'r')
#       data['news'].append(f.read())
#       data['category'].append(cat)
#       f.close()
#     except:
#       continue

# dataframe = pd.DataFrame(data)
# print(dataframe)
# dataframe.to_csv('09-classification/news1.csv')

df=pd.read_csv('09-classification/news1.csv',usecols=['category', 'news'])
print(df)

# df.groupby('category').News.count().plot.bar(ylim=0)
# plt.show()

# Training model
from sklearn.linear_model import LogisticRegression
log_regression = LogisticRegression()

vectorizer = TfidfVectorizer(stop_words="english", norm='l2')

X = df['News']
Y = df['Category']
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.25) #Splitting dataset


#Creating Pipeline
pipeline = Pipeline([('vect', vectorizer),
                     ('chi',  SelectKBest(chi2, k=1200)),
                     ('clf', LogisticRegression(random_state=0))])


#Training model
model = pipeline.fit(X_train, y_train)

#Creating pickle file
with open('LogisticRegression.pickle', 'wb') as f:
    pickle.dump(model, f)



#Accuracy
from sklearn.metrics import accuracy_score
predict = model.predict(X_test)
print(accuracy_score(y_test,predict))
print('\n')
print(predict)